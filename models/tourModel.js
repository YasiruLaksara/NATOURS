const mongoose = require("mongoose");
const slugify = require("slugify"); //before that npm i slugify //not essential//This is for middlwares

const tourSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: [true, "Tour name is required"],
      unique: true,
    },

    slug: String,

    duration: {
      type: Number,
      required: [true, "Duration is required"],
    },

    maxGroupSize: {
      type: Number,
      required: [true, "Max group size is required"],
    },

    difficulty: {
      type: String,
      required: [true, "Difficulty is required"],
      enum: {
        values: ["easy", "medium", "hard"],
        message: "Difficulty must be easy, medium, or hard",
      },
    },
    ratingAverage: {
      type: Number,
      default: 4.5,
    },

    ratingsQuantity: {
      type: Number,
      default: 0,
    },
    price: {
      type: Number,
      required: [true, "Price is required"],
    },

    priceDiscount: {
      type: Number,
    },

    summary: {
      type: String,
      required: [true, "Summery is required"],
      trim: true,
    },

    description: {
      type: String,
      trim: true,
    },

    imageCover: {
      type: String,
      required: [true, "A tour must contain a cover image"],
    },

    images: {
      type: [String],
    },

    createdAt: {
      type: Date,
      default: Date.now(),
      select: false, // This field will not be outputed as a querry result
    },

    startDates: {
      type: [Date], //Array of dates
    },

    secreatTour: {
      type: Boolean,
      default: false,
    },
  },

  //begining of virtual properties(Business Logics)
  {
    toJSON: { virtuals: true },
    toObject: { virtuals: true },
  }
);

tourSchema.virtual("durationWeeks").get(function () {
  //these duration Weeks are generated by us.not given.for that we use virtual properties
  return this.duration / 7;
});

//Document Middleware runs before save() and create()

// tourSchema.pre("save", function (next) {
//   this.slug = slugify(this.name, { lower: true }); //slugify for
//   next();
// });

// tourSchema.pre("save", function (next) {
//   console.log("will save document");
//   next();
// });

// tourSchema.post("save", function (doc, next) {
//   console.log(doc);
//   next();
// });

//Query Middleware
tourSchema.pre("find", function (next) {
  this.find({ secreatTour: { $ne: true } });

  this.start = Date.now();
  next();
});

tourSchema.post(/^find/, function (docs, next) {
  console.log(`Query took: ${Date.now() - this.start} milliseconds`);
  console.log(docs);
  next();
});

const Tour = mongoose.model("Tour", tourSchema); //collection

module.exports = Tour;
